public class MyHashTable <K,V> {
	
	private MiListaEnlazada<MyNodoHash<K,V>>[] tabla;  //DE QUE VA A SER MI ARREGLO? DE LISTAS ENLAZADAS, DE QUE VA A SER MI LISTA ENLAZADA? DE NODOS
	private int size;
	private static final double LOAD_FACTOR=0.75;
	
	public MyHashTable() {
		this.tabla=(MiListaEnlazada<MyNodoHash<K,V>>[]) new MiListaEnlazada[1];
		this.size=0;
		for(int x=0;x<this.tabla.length;x++) {
			this.tabla[x]=new MiListaEnlazada<>(); //INICIALIZAMOS LAS LISTAS ENLAZADAS
							//EN CADA POSIICION TIENES UNA LISTA ENLAZADA VACIA 
		}
	}
	
	
	public void put(K llave,V valor) {
		int index=llave.hashCode()%this.tabla.length;//EN QUE POSIICON DEL ARREGLO DEBO GUARDAR EL ELEMENTO
		this.tabla[index].insertarFin(new MyNodoHash<>(llave,valor));
		this.size++;
		if((double)this.size/this.tabla.length>MyHashTable.LOAD_FACTOR) {
			reHashing();
		}
	}
	
	public void reHashing() {
		//GENERA UNA NUEVA TABLA DE TAMANO DOBLE MAS 1 Y GUARDA LOS ELEMENTOS DE LA TABLA ANTERIOR A LA NUEVA TABLA (GRANDE)
		//MUY IMPORTANTE REACOMODAR LOS ELEMENTOS
		
		MiListaEnlazada <MyNodoHash<K,V>>[]tablaTEMP=this.tabla; //CREANDO MI ARREGLO DE LISTAS Y LE ESTOY PASANDO LOS DATOS DE LA PRINCIPAL
		this.tabla=(MiListaEnlazada<MyNodoHash<K,V>>[]) new MiListaEnlazada[(size*2)+1]; //AQUI LE DIGO QUE SEA DE TAMANO DOBLE 
		for(int x=0;x<tablaTEMP.length;x++) {
			MiListaEnlazada <MyNodoHash<K,V>> lista=tablaTEMP[x];
			while(!lista.estaVacia()) {
				MyNodoHash<K,V> nodoTEMP=lista.pop();
				put(nodoTEMP.llave,nodoTEMP.valor);
			}
		}
	}
	
	
	public V get (K llave) {
		//CALCULAR EL INDICE DONDE DEBERIA ESTAR ESTA LLAVE
		// BUSCAR EN LA LISTA SI ESTA UN NODO CON LA LLAVE BUSCADA, SI ESTA REGRESA EL VALOR, SI NO NOSUCHELEMENTEXCEPTION
		V valor;
		for(int x=0;x<tabla.length;x++) {
			//valor=this.tabla[x].
		}
		return null;
	}
	
	public V delete(K llave, V valor) {
		//CALCULAR EL INDICE DONDE DEBERIA ESTAR ESTA LLAVE
		// BUSCAR EN LA LISTA SI ESTA UN NODO CON LA LLAVE BUSCADA, SI ESTA BORRAR EL VALOR, SI NO NOSUCHELEMENTEXCEPTION
		return valor;
		
	}
	
	public boolean containsKey(K llave) {
		return true;
		//REGRESA TRUE SI LA TABLA TIENE LAMLLAVE QUE SE PASO COMO PARAMETRO
	}
	
	public void clear () {
		//VACIA LA TABLA
	}
	
	
	
	public static void main(String[] args) {
		MyHashTable<Integer, String> datos=new MyHashTable<Integer,String>();
		datos.put(1,"1000");
		datos.put(2,"1000");
		datos.put(3,"1000");
		datos.put(4,"1000");
		datos.put(5,"1000");
		datos.put(1,"2000");
		
	}
	
	
	//////////////////////////////////////////////////////////////////////////////////////////////
	class MyNodoHash<K,V>{
		K llave;
		V valor;
		
		public MyNodoHash(K llave, V valor) {
			this.llave = llave;
			this.valor = valor;
		}

		public V getValor() {
			return valor;
		}

		public void setValor(V valor) {
			this.valor = valor;
		}

		public K getLlave() {
			return llave;
		}
		
	}
}
